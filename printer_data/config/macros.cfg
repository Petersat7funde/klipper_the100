#####################################################################
#      Macros
#####################################################################
[gcode_macro PRINT_START]
gcode:
   {% set BED_TEMP = params.BED|default(60)|int %}
   {% set EXTRUDER_TEMP = params.HOTEND|default(220)|int %}
   START_PRINT

[gcode_macro START_PRINT]
gcode:
   {% set BED_TEMP = params.BED|default(60)|int %}
   {% set EXTRUDER_TEMP = params.HOTEND|default(220)|int %}
   CLEAR_PAUSE
   BED_MESH_CLEAR ; clear calibrations

   {% if printer.heater_bed.temperature < (BED_TEMP-10) %}
      M140 S{BED_TEMP-10}
   {% endif %}
     
   G90 ; use absolute coordinates
   G92 E0 ; reset extruder
   
   {% if "xyz" not in printer.toolhead.homed_axes %}
      G28 ; home all axis
   {% endif %}
   G1 ; set units to millimeters

   { action_respond_info("Bed Heating...") }
   {% if printer.heater_bed.temperature < (BED_TEMP-10) %}
      M190 S{BED_TEMP-10} ;head bed
   {% endif %}

   BED_MESH_CALIBRATE   ; bed mesh while heating bed

   M104 S{EXTRUDER_TEMP}
   M190 S{BED_TEMP}
   M109 S{EXTRUDER_TEMP}
   
   #BED_MESH_PROFILE LOAD=default
   
   # KAMP Line purge
   LINE_PURGE
   #DRAW_LINE SPEED=1800

   G1 E-2 F900  ; retract a bit


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
   M220 S100 ; Reset Speed factor override percentage to default (100%)
   M221 S100 ; Reset Extrude factor override percentage to default (100%)
   G91 ; Set coordinates to relative
   {% if printer.extruder.temperature >= 170 %}
      G1 F1800 E-1 ; Retract filament 3 mm to prevent oozing
   {% endif %}
   ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
   {% if printer.toolhead.homed_axes == "xyz" %}
      G1 F1200 Z20 ; Move Z Axis up 10 mm to allow filament ooze freely
      G90 ; Set coordinates to absolute
      G1 X{ printer.toolhead.axis_minimum.x +10 } Y{ printer.toolhead.axis_maximum.y - 20 } F3600 ; Move Printer Head Out of Way
      ; M84 ; Disable stepper motors - don't so the gantry stays aligned
   {% endif %}
   ;set part fan speed to zero.
   M106 S0
   M104 S{printer.extruder.temperature-20}
   ;bed and hotend are left at the print temps in case I want to restart.
   CLEAR_PAUSE
   BED_MESH_CLEAR  ; clear mesh calibration
   BASE_CANCEL_PRINT

[gcode_macro PRINT_END]
gcode:
  END_PRINT

[gcode_macro END_PRINT]
gcode:

    # Move nozzle away from print while retracting
    G91 ;releative positioning
    G1 E-2 F2700 ;Retract a bit
    G1 E-2 Z0.2 F2400 ;Retract and raise Z
    G1 X-3 Y-3 F3000 ;Wipe out
    G1 Z10 F1800 ;Raise Z more

    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0

    G90 ; Absolute Positioning
    BED_MESH_CLEAR ; clear mesh calibration


    # changed due to klicky -  now in the right backward edge instead of left
    G1 X{ printer.toolhead.axis_maximum.x -10 } Y{ printer.toolhead.axis_maximum.y - 5 } F3600 ; Move Printer Head Out of Way

    M84 X Y E ;Disable all steppers but Z

[gcode_macro DRAW_LINE]
gcode:
    {% set SPEED = params.SPEED|default(900)|int %}
    G92 E0 ;Reset Extruder
    G1 Z2.0 F1800 ;Move Z Axis up
    
    G1 X5.1 Y40 Z0.3 F5000 ;Move to start position
    G1 X5.1 Y140.0 Z0.3 F{SPEED} E15 ;Draw the first line
    G1 X5.4 Y140.0 Z0.3 F{SPEED} ;Move to side a little
    G1 X5.4 Y40 Z0.3 F{SPEED}.0 E30 ;Draw the second line

    G92 E0 ;Reset Extruder
    G1 E-0.6 F1800 ; retract a bit
    G1 Z2.0 F3000 ;Move Z Axis up
    #G4 P2000 ;wait 2 sec
    G4 P1000 ;wait 1 sec
    #G1 X8 F{SPEED} ;Move to side so it doesn't crash in to the blob
    G1 X8 F5000

[gcode_macro WAIT_FOR_BED_TEMP]
gcode:
    #Parameters
    {% set s = params.S|float %}

    {% if (s-20) > 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-20} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}

# M109 - Wait for Hotend Temperature
[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s > 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+3}   ; Wait for hotend temp (within 3 degree)
    {% endif %}

#M190 - Wait for Bed Temperature
[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s > 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+3}  ; Wait for bed temp (within 3 degree)
    {% endif %}

[gcode_macro BringToFront]
gcode:
    G1 X65 Y-1 Z30 F5000 

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    {% set R = params.R|default(-50)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    # Retract 50mm
    G1 E {R} F1000
    RESTORE_GCODE_STATE NAME=M600_state
    
######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}


# Commented out because klicky provides it
###############################    
##### HOMING MACROS START #####
#G28 - Auto Home
#[gcode_macro G280]
#rename_existing: G280
#gcode:
#  M80
#  SET_KINEMATIC_POSITION Z=0
#  G90
#  G1 Z5 F1200
#  #SENSORLESS_HOME_X
#  #SENSORLESS_HOME_Y
#  #SENSORLESS_HOME_Z
#  _HOME_X
#  _HOME_Y
#  _HOME_Z 
#[gcode_macro SENSORLESS_HOME_X]

[gcode_macro _HOME_X]
gcode:
    SENSORLESS_DELAY
    # Home
    G28 X #G280 X
    # Move away
    G1 X{ printer.toolhead.axis_maximum.x/2 } F6000

#[gcode_macro SENSORLESS_HOME_Y]
[gcode_macro _HOME_Y]
gcode:
    SENSORLESS_DELAY
    # Home
    G28 Y #G280 Y
    # Move away
    G90
    G1 Y{ printer.toolhead.axis_maximum.y/2 } F6000

#[gcode_macro SENSORLESS_HOME_Z]
[gcode_macro _HOME_Z]
gcode:
    SENSORLESS_DELAY
    # Home
    G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y } F6000
    G28 Z #G280 Z
    SET_KINEMATIC_POSITION Z=5
    G1 Z0 F1200
    G1 Z10 F1200
    SENSORLESS_DELAY
    G28 Z #G280 Z
    G1 Z10 F600  # Make sure we clear the toolhead 
    #G1 X{ printer.toolhead.axis_minimum.x +5 } Y{ printer.toolhead.axis_maximum.y -2 } F6000
    # KlickyNG is on the left side (minimum.x) so use the other side (maximum.x) as starting position
    G1 X{ printer.toolhead.axis_maximum.x -5 } Y{ printer.toolhead.axis_maximum.y -2 } F6000

[gcode_macro SENSORLESS_DELAY]
gcode:
    # Pause to ensure driver stall flag is clear
    G4 P2000

#M80 - Power On
[gcode_macro M80]
gcode:
  SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
  SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1

##### HOMING MACROS END #####

#[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
#gcode:    
#    G28
#    BED_MESH_CALIBRATE


#[gcode_macro BED_PROBE]
#gcode:    
#    G28 ; todo query for homed
#    G90 ; absolute
#    
#    G0 Z5 F720
#    G0 X30 Y40 F6000
#    PROBE
#
#    G0 Z5 F720
#    G0 X149 Y40 F6000
#    PROBE
#
#    G0 Z5 F720
#    G0 X30 Y139 F6000
#    PROBE
#
#    G0 Z5 F720
#    G0 X149 Y139 F6000
#    PROBE

#[gcode_macro BED_PROBE_X]
#gcode:    
#    G90 ; absolute
#    
#    G0 Z5 F720
#    G0 X30 Y25 F6000
#    PROBE

#    G0 Z5 F720
#    G0 X170 Y25 F6000
#    PROBE

#    G0 Z5 F720
#    G0 X30 Y165 F6000
#    PROBE

#    G0 Z5 F720
#    G0 X170 Y165 F6000
#    PROBE


##########################################################################################
# https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/TEST_SPEED.cfg
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
        _KlickyDebug msg="x_min,x_max,y_min,y_max {x_min},{x_max},{y_min},{y_max}"
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}


    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y  # speed-up the100 testing and do only xy home
        # G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    